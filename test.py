import cv2
import sys
import numpy as np
import os

def збільшити_яскравість(image):
    """
    Збільшує яскравість зображення.
    """
    # Коефіцієнт збільшення яскравості
    коефіцієнт_яскравості = 1.5

    # Конвертація зображення в формат HSV
    hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # Збільшення значень яскравості
    hsv_image[:, :, 2] = np.clip(hsv_image[:, :, 2] * коефіцієнт_яскравості, 0, 255)

    # Повернення зображення у формат BGR
    return cv2.cvtColor(hsv_image, cv2.COLOR_HSV2BGR)

def зменшити_яскравість(image):
    """
    Зменшує яскравість зображення.
    """
    # Коефіцієнт зменшення яскравості
    коефіцієнт_яскравості = 0.5

    # Конвертація зображення в формат HSV
    hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # Зменшення значень яскравості
    hsv_image[:, :, 2] = np.clip(hsv_image[:, :, 2] * коефіцієнт_яскравості, 0, 255)

    # Повернення зображення у формат BGR
    return cv2.cvtColor(hsv_image, cv2.COLOR_HSV2BGR)

def обробити_зображення(image_path, вибрані_фільтри, save_path=None):
    """
    Обробляє зображення за вибором користувача і зберігає його.

    :param image_path: Шлях до вхідного зображення.
    :param вибрані_фільтри: Список вибраних фільтрів для застосування.
    :param save_path: Шлях для збереження обробленого зображення.
    """
    # Завантаження зображення
    image = cv2.imread(image_path)

    # Перевірка чи вдалося завантажити зображення
    if image is None:
        print("Не вдалося завантажити зображення.")
        return

    # Перетворення фільтрів з числових значень на повні назви
    for i in range(len(вибрані_фільтри)):
        if вибрані_фільтри[i].isdigit():
            вибрані_фільтри[i] = показати_доступні_фільтри()[int(вибрані_фільтри[i]) - 1]

    # Ітеруємося по кожному вибраному фільтру та застосовуємо його
    for вибраний_фільтр in вибрані_фільтри:
        if вибраний_фільтр == 'розмиття':
            # Застосування фільтру розмиття
            image = cv2.blur(image, (10, 10))  
        elif вибраний_фільтр == 'підвищення насиченості':
            # Збільшення насиченості кольорів
            hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
            hsv_image[:, :, 1] = hsv_image[:, :, 1] * 1.5  
            image = cv2.cvtColor(hsv_image, cv2.COLOR_HSV2BGR)
        elif вибраний_фільтр == 'виявлення країв':
            # Виявлення країв
            image = cv2.Canny(image, 100, 200)  
        elif вибраний_фільтр == 'відтінки сірого':
            # Перетворення зображення в чорно-біле
            image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        elif вибраний_фільтр == 'негатив':
            # Негатив зображення
            image = 255 - image
        elif вибраний_фільтр == 'збільшення яскравості':
            # Збільшення яскравості
            image = збільшити_яскравість(image)
        elif вибраний_фільтр == 'зменшення яскравості':
            # Зменшення яскравості
            image = зменшити_яскравість(image)
        elif вибраний_фільтр == 'агат':
            # Фільтр "Агат"
            image = cv2.applyColorMap(image, cv2.COLORMAP_HOT)
        elif вибраний_фільтр == 'темно-синій':
            # Фільтр "Темно-синій"
            image = cv2.applyColorMap(image, cv2.COLORMAP_WINTER)
        elif вибраний_фільтр == 'рожевий':
            # Фільтр "Рожевий"
            image = cv2.applyColorMap(image, cv2.COLORMAP_PINK)
        else:
            print(f"Невідомий фільтр: {вибраний_фільтр}. Пропускаємо.")

    # Збереження обробленого зображення, якщо вказано шлях для збереження
    if save_path:
        # Визначення чи файл існує
        if os.path.exists(save_path):
            # Видалення існуючого файлу
            os.remove(save_path)
        cv2.imwrite(save_path, image)
        print(f"Оброблене зображення збережено за шляхом: {save_path}")
    else:
        # Збереження обробленого зображення як оригіналу
        cv2.imwrite(image_path, image)
        print(f"Оброблене зображення замінило оригінал: {image_path}")

def показати_доступні_фільтри():
    """
    Показує список доступних фільтрів.
    """
    доступні_фільтри = ["розмиття", "підвищення насиченості", "виявлення країв", "відтінки сірого", "негатив", 
                        "збільшення яскравості", "зменшення яскравості", "агат", "темно-синій", "рожевий"]
    print("Доступні фільтри:")
    for i, фільтр in enumerate(доступні_фільтри, start=1):
        print(f"{i}. {фільтр}")
    return доступні_фільтри

if __name__ == "__main__":
    # Отримання шляху до фотографії від користувача
    шлях_до_зображення = input("Введіть шлях до фото: ")

    # Перевірка наявності шляху до фотографії
    if not шлях_до_зображення:
        print("Введіть шлях до фото")
        sys.exit(1)

    # Показати список доступних фільтрів
    доступні_фільтри = показати_доступні_фільтри()

    # Вибір фільтрів
    вибрані_фільтри_ввід = input("Введіть номери фільтрів (через кому) або назви фільтрів, розділені комами:")
    вибрані_фільтри = []
    for вибраний_фільтр_або_номер in вибрані_фільтри_ввід.split(','):
        вибраний_фільтр_або_номер = вибраний_фільтр_або_номер.strip()
        if вибраний_фільтр_або_номер.isdigit():
            вибрані_фільтри.append(доступні_фільтри[int(вибраний_фільтр_або_номер) - 1])
        else:
            вибрані_фільтри.append(вибраний_фільтр_або_номер)

    # Опціональний ввід шляху для збереження
    шлях_збереження = input("Введіть шлях для збереження обробленого зображення (або залиште порожнім для заміни оригіналу): ")

    # Виклик функції обробки зображення
    обробити_зображення(шлях_до_зображення, вибрані_фільтри, шлях_збереження)
